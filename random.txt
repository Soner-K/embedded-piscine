# Embedded Systems Cheat Sheet: AVR Microcontroller Programming

## Core Concepts

### AVR Microcontrollers
- **Definition**: 8-bit RISC microcontrollers developed by Atmel (now Microchip)
- **Architecture**: Modified Harvard (separate program and data memory)
- **Common Models**: ATmega328P (used in Arduino Uno), ATmega32, ATtiny85
- **Features**: Flash memory, EEPROM, SRAM, I/O pins, timers, ADC, serial interfaces

### Compilation Process for AVR
1. **Source Code (.c)**: Human-readable code written in C
2. **Compilation**: Source code is translated to machine code
3. **Binary File (.bin)**: Contains raw machine code instructions
4. **Intel HEX Format (.hex)**: Text-based representation of binary data

### Memory Types
- **Flash Memory**: Non-volatile program storage (retains data when power is off)
- **EEPROM**: Non-volatile data storage, slower but durable
- **SRAM**: Volatile memory for runtime variables

## Essential Tools

### avr-gcc
- **Purpose**: Cross-compiler for AVR microcontrollers
- **Function**: Converts C code into machine code for AVR architecture
- **Key Options**:
  - `-DF_CPU=value`: Define CPU clock frequency
  - `-mmcu=device`: Specify target AVR device
  - `-c`: Compile without linking
  - `-o filename`: Specify output filename

### avr-objcopy
- **Purpose**: Converts between object file formats
- **Function**: Translates binary files to Intel HEX format for programming
- **Key Options**:
  - `-O ihex`: Output in Intel HEX format
  - `-j section`: Copy only specific sections

### avrdude
- **Purpose**: AVR Downloader/UploaDEr
- **Function**: Transfers programs to AVR microcontroller's flash memory
- **Key Options**:
  - `-p partno`: Specify AVR device part number
  - `-c programmer`: Specify programmer type
  - `-P port`: Specify communication port
  - `-b baudrate`: Specify baud rate
  - `-U memory:op:file:format`: Memory operation specification

## Technical Parameters

### Clock Frequency (F_CPU)
- **Definition**: Speed at which the CPU executes instructions
- **Units**: Hertz (Hz) - cycles per second
- **Common Values**: 1MHz, 8MHz, 16MHz
- **Importance**: Affects timing, power consumption, and communication rates

### Baud Rate
- **Definition**: Data transmission speed in serial communication
- **Units**: Bits per second (bps)
- **Common Values**: 9600, 19200, 115200
- **Calculation**: Must be based on F_CPU for accurate timing

## Programming Workflow
1. Write C code for AVR microcontroller
2. Compile code to binary file using avr-gcc
3. Convert binary to HEX file using avr-objcopy
4. Flash HEX file to microcontroller using avrdude
5. Microcontroller executes program from flash memory

## Makefile Automation
- **Purpose**: Automates the build and flash process
- **Components**: Variables, rules, dependencies
- **Key Rules**:
  - Compilation rule: Source → Binary
  - Conversion rule: Binary → HEX
  - Flash rule: HEX → Microcontroller
  - Clean rule: Remove generated files
  
  
  
 Concepts Behind the Code
1. Understanding Microcontroller Pins

    Each pin can be either an input (reads external signals) or an output (sends signals).
    PB0 refers to Pin 0 of Port B.
    To control a pin, the microcontroller provides special registers.

2. The DDRB Register (Data Direction Register B)

    Controls whether each pin is an input or an output.
    Each bit in DDRB corresponds to a pin.
    0 = Input, 1 = Output.
    DDRB |= 1; → Sets PB0 as an Output without modifying other bits.

3. The PORTB Register

    Controls whether an output pin is HIGH (5V) or LOW (0V).
    0 = LOW (0V), 1 = HIGH (5V).
    PORTB |= 0b1; → Sets PB0 to HIGH, turning on any connected component (e.g., an LED).

4. Bitwise Operations Used

    1 << PB0 → Moves the 1 to the PB0 bit position (no shift needed since PB0 = 0).
    |= → Bitwise OR, ensures that only PB0 is modified while keeping other bits unchanged.

Code Execution Summary
Instruction	Register	Binary Before	Binary After	Effect
`DDRB	= 1;`	DDRB	00000000	00000001
`PORTB	= 1;`	PORTB	00000000	00000001
Why This Is Necessary

    If PB0 is not set as output (DDRB = 0), setting PORTB will do nothing.
    If PB0 is set as output, then PORTB controls its voltage (0V or 5V).
    Bitwise operations ensure only PB0 is changed, avoiding unwanted modifications.

Conclusion

This program: ✅ Configures PB0 as an output.
✅ Sets PB0 HIGH (5V).
✅ If an LED is connected to PB0, it will turn ON.

This method is the most efficient way to manipulate microcontroller pins without affecting other registers.
